name: CI & Release

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

jobs:
  test:
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    strategy:
      matrix:
        node-version: [18]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{secrets.GH_TOKEN}}

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.6.2

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ matrix.node-version }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Auto format and lint fix
        if: github.event_name != 'pull_request'
        run: |
          pnpm format
          pnpm lint:fix

      - name: Check for changes after auto-fix
        if: github.event_name != 'pull_request'
        id: verify-changed-files
        run: echo "changed=$(if git diff --quiet; then echo 'false'; else echo 'true'; fi)" >> $GITHUB_OUTPUT

      - name: Commit auto-fixes
        if: github.event_name != 'pull_request' && steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --local user.email "33030965+tizee@users.noreply.github.com"
          git config --local user.name "tizee"
          git add .
          git commit -m "style: [🤖] bot auto-fix format and lint issues"

      - name: Push auto-fixes
        if: github.event_name != 'pull_request' && steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git push origin HEAD:${{ github.ref_name }}

      - name: Format check (for PRs)
        if: github.event_name == 'pull_request'
        run: pnpm format:check

      - name: Lint (for PRs)
        if: github.event_name == 'pull_request'
        run: pnpm lint

      - name: Build
        run: pnpm build

      - name: Read package.json for build artifact validation
        id: package
        run: |
          echo "main=$(node -p "require('./package.json').main")" >> $GITHUB_OUTPUT
          echo "module=$(node -p "require('./package.json').module")" >> $GITHUB_OUTPUT
          echo "types=$(node -p "require('./package.json').types")" >> $GITHUB_OUTPUT

      - name: Check build artifacts
        run: |
          test -f "${{ steps.package.outputs.main }}" && echo "✅ Main build exists: ${{ steps.package.outputs.main }}" || (echo "❌ Main build missing: ${{ steps.package.outputs.main }}" && exit 1)
          test -f "${{ steps.package.outputs.module }}" && echo "✅ ES Module build exists: ${{ steps.package.outputs.module }}" || (echo "❌ ES Module build missing: ${{ steps.package.outputs.module }}" && exit 1)
          test -f "${{ steps.package.outputs.types }}" && echo "✅ TypeScript definitions exist: ${{ steps.package.outputs.types }}" || (echo "❌ TypeScript definitions missing: ${{ steps.package.outputs.types }}" && exit 1)

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.6.2

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache pnpm modules
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-18-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-18-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Publish to npm
        run: pnpm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
